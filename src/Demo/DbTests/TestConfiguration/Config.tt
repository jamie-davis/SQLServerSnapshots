<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#

    //Some things to note about this template:
    //  - The hostspecific="true" setting at the top of the template allows access to the Host object.
    //  - The project file needs a tweak to force generation as part of the build.
    //  - We exclude the generated class from source control.
    //  - The template reads a local file, also excluded from source control, called Testing.Config.xml
    //    to gather settings top allow the tests to connect to the test database. If the file is absent,
    //    a default connection string will be used attempting to access a local database called TestDb.
    //  - Testing.Config.xml will be generated by the DbUp Create command, so if you create a database
    //    for testing, it should be used without further manual intervention.
    //  - The DbUp project also has a "switch" command that will generate the configuration file for
    //    a database so that you can create more than one and switch as appropriate. This is intended
    //    to assist when you are working on multiple branches which may have different database schemas.

    var usingDefault = true;
    var connectionString = $"Server=localhost;Database=TestDb;Trusted_Connection=True;"; //note - default database connection string
    var server = string.Empty;
    var database = string.Empty;
    var xmlPath = Path.Combine(Host.ResolvePath(""), "Testing.Config.xml");
    if (File.Exists(xmlPath))
    {
        var xDoc = XDocument.Load(xmlPath);
        if (xDoc != null && xDoc.Root != null)
        {
            var connectionStringElement = xDoc.Root.DescendantsAndSelf()
                .FirstOrDefault(x => x.Name.LocalName == "ConnectionString");

            var serverElement = xDoc.Root.DescendantsAndSelf()
                .FirstOrDefault(x => x.Name.LocalName == "server");

            var databaseElement = xDoc.Root.DescendantsAndSelf()
                .FirstOrDefault(x => x.Name.LocalName == "database");

            if (connectionStringElement != null)
            {
                connectionString = $@"{connectionStringElement.Value}";
                usingDefault = false;
            }

            if (serverElement != null)
                server = $@"{serverElement.Value}";

            if (databaseElement != null)
                database = $@"{databaseElement.Value}";
        }
    }

#>
using System;
using Xunit;

namespace DbTests.TestConfiguration
{
    public static class Config
    {
<# if (usingDefault)
{#>
        // Using default database location
<#
}
#>
        public const string ConnectionString = @"<#=connectionString#>";

        public const string Server = @"<#=server#>";

        public const string Database = @"<#=database#>";
    }
}